% evaluate the model generated by gKDR_GMM_makemodel_cross_K_shift.m
% by log likelihood and permutation of all inputs.

function gKDR_GMM_cross_evaluateL_new_K4_offseteach(UGE_TASK_ID_text)
% UGE_TASK_ID_text= (offseti)  (1-5)

% Requires
% [model_folder]/samplex_model_data.mat


%%%%%%%%%%%%%%%%%%%%%  preset parameters %%%%%%%%%%%%%%%%%%%

%sampleID = str2num(UGE_TASK_ID_text); % input argument

%sampleID = floor((str2num(UGE_TASK_ID_text)-1)/3)+1;
%Ki = mod((str2num(UGE_TASK_ID_text)-1),3)+1;
offseti = str2num(UGE_TASK_ID_text);

partition_number = 3;
npermutes = 100;

sampleID = 1;
Ki = 1;
Ks = 4; %3:5;
kGMMs = [2];
link = 'indirect';
offsets = 0:4;
offset_number = length(offsets);
permute_salt = true;
draw_histogram = false;% true;  % this is not yet updated and does not work
draw_ps = true;
draw_sumlogL = true;
embed_width = 30; %10; % number of embed_step's used for embedding = column number in source data    % need
embed_step = 10; %10; % invervals used for embedding (index-based)                % need

%project_folder = '/Volumes/Transcend J/_4DImaging_Data_Analysis/gKDR-GMM/gKDR_GMM_50mM/Linked_gKDR_freerun/publish_version/';
%project_folder = '/Users/iino/Documents/___Transcend J/_4DImaging_Data_Analysis/gKDR-GMM/gKDR_GMM_50mM/Linked_gKDR_freerun/publish_version/';
project_folder = '/Users/iino/Documents/___Transcend J/_4DImaging_Data_Analysis/gKDR-GMM/gKDR_GMM_50mM/Linked_gKDR_freerun/publish_version_test/';
%project_folder = '/home/iino/gKDR_GMM_50mM/Linked_gKDR_freerun/publish_version';
common_data_folder = fullfile(project_folder, 'common_data'); %'../ver92_Hbase/common_data';
gKDR_codes_folder = fullfile(project_folder, 'gKDR_codes');
utilities_folder = fullfile(project_folder, 'utilities'); %'../'
metadata_folder = fullfile(project_folder, 'metadata'); %'../'
models_folder = fullfile(project_folder, 'models'); % ['../ver98_HLong/model_indirect_k' num2str(embed_width) '_tau' num2str(embed_step) '_kGMM' num2str(kGMM)];
evaluateL_results_folder = fullfile(project_folder, 'evaluateL_results'); %['../ver98_HLong/figures_' link '_k' num2str(embed_width) '_tau' num2str(embed_step) '_K' num2str(K) '_kGMM' num2str(kGMM) '/sample' num2str(sampleID)];


%%%%  Initial procedure  %%%%%

%tic
rng('shuffle');

use_salt_input = true;             % needed
embed_before = embed_width-1;

addpath(gKDR_codes_folder);
addpath(utilities_folder);

if ~exist(evaluateL_results_folder, 'dir')
    mkdir(evaluateL_results_folder)
end

load(fullfile(common_data_folder,['sample' num2str(sampleID) '_data.mat']), 'uniqNames', 'targetcellnames', 'targetcells', 'Mt'); % 'data', 'autocorrthreshold', 'autocorrlag'

% for now
%Mt=2;

%%%%%  Different condition loop  %%%%%

%for Ki = 1:length(Ks)
K = Ks(Ki);
for kGMM = kGMMs

    disp('start')
    disp(['sample ' num2str(sampleID)])
    disp(['< K ' num2str(K) ' >'])
    disp(['< kGMM ' num2str(kGMM) ' >']);


    evaluateL_result_subfolder = fullfile(evaluateL_results_folder, [link '_k' num2str(embed_width) '_tau' num2str(embed_step) '_K' num2str(K) '_kGMM' num2str(kGMM)  '_new_offsets']);

    if ~exist(evaluateL_result_subfolder, 'dir')
        mkdir(evaluateL_result_subfolder)
    end

    if draw_histogram
        evaluate_histogram_file = fullfile(evaluateL_result_subfolder, ['sample' num2str(sampleID) '_permutation_test_histograms.ps']);
        if exist(evaluate_histogram_file, 'file')
            delete(evaluate_histogram_file)
        end
    end
    %{
        if draw_ps
            evaluateL_permtest_file = fullfile(evaluateL_result_subfolder, ['all_samples_permutation_test_permsalt.ps']);
            if exist(evaluateL_permtest_file, 'file')
                delete(evaluateL_permtest_file)
            end
        end

        if draw_sumlogL
            evaluateL_sumlogL_file = fullfile(evaluateL_result_subfolder, ['all_samples_sumlogL0s.ps']);
            if exist(evaluateL_sumlogL_file, 'file')
                delete(evaluateL_sumlogL_file)
            end
        end
    %}

    %%%%%%%%%%%%%%%   draw histogram prepare  %%%%%%%%%%%%%%%%%%

    page = 0;
    if draw_histogram
        fig = figure;
        fig.PaperType       = 'a4';
        fig.PaperOrientation = 'landscape';
        fig.PaperUnits      = 'centimeters';
        fig.PaperPosition   = [0,0,29.7,21];
        fig.Units           = 'centimeters';
        fig.Position        = [0,0,29.7,21];
        fig.Color           = 'w';
        fig.InvertHardcopy  = 'off';
    end

    %Mt = 2;
    p_array = NaN(Mt,partition_number,partition_number,offset_number);
    sumlogL0_array = NaN(Mt,partition_number,partition_number,offset_number);
    sumlogL_array = NaN(Mt,partition_number,partition_number,offset_number,npermutes);

    %for offseti = 1:length(offsets)
    offset = offsets(offseti);

    for training_partition = 1:partition_number
        for test_partition = 1:partition_number
            disp(['< offset ' num2str(offset) ' >'])
            disp(['<< train ' num2str(training_partition)  ' ; test ' num2str(test_partition) ' >>'])

            evaluateL_result_file_header = fullfile(evaluateL_result_subfolder, ['sample' num2str(sampleID) '_modelpart' num2str(training_partition) '_testpart' num2str(test_partition)]);

            model_subfolder = fullfile(models_folder, ['model_' link '_k' num2str(embed_width) '_tau' num2str(embed_step) '_kGMM' num2str(kGMM) '_cross' num2str(partition_number)]);
            modelfileheader = fullfile(model_subfolder, ['sample' num2str(sampleID) '_K' num2str(K) '_offset' num2str(offset) '_part' num2str(training_partition)]);
            modeldatafile = [modelfileheader '_modeldata.mat'];
            paramfile = [modelfileheader '_param.mat'];
            load(modeldatafile, 'uniqNames','targetcells','selicell','colscell','Bcell','gmcell','train_span','data','target_train_all','source_train_all');
            load(paramfile, 'time_step','nahead', 'prediction_method');

            % source_train_all and target_train_all are loaded from modeldata
            % selicell, Bcell, gmcell has been loaded from model.data

            disp([num2str(length(uniqNames)) ' names, ' num2str(size(data,2)) ' data'])
            n = size(data, 1); % data, uniqNames and train_span in included in modeldata
            disp(['n=',num2str(n)])
            npart = floor(n/partition_number);
            test_span = [1, npart]+npart*(test_partition-1);

            %Mt = length(targetcells);
            targetcellnames = uniqNames(targetcells);

            if use_salt_input
                salttable = readtable(fullfile(metadata_folder, 'stimulation_timing.csv'),'ReadVariableNames',false,'HeaderLines',1); % from PreserveVariableNames
                startframe = table2array(salttable(sampleID,3));
                period = table2array(salttable(sampleID,4));
                saltdata = generatesalt(n, startframe, period);
            end


            %%%%%%%%%%%%%%%%  make source_test_all and target_test_all for test_span  %%%%%%%%%%%%%%%%%

            disp('execute embedding')
            if use_salt_input
                sourcedata = [saltdata(1:n)' data(:,targetcells)];
            else
                sourcedata = data(:,targetcells);
            end

            %%%%%%%%%  embedding  %%%%%
            [source_test_all, target_test_all, ~, ~] = ...
                embed4D(sourcedata, data(:,targetcells), test_span, [], embed_step, embed_before, time_step, nahead);



            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            %%%%%%%%   evaluate log(L) and permutation test of U and Y   %%%%%%%
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            %Mt = 2;
            disp(['number of targetcells: ' num2str(Mt)]);
            sample_ps = NaN(1, Mt);
            sumlogL0s = NaN(1, Mt);
            nc = size(target_test_all,1);

            for targeti = 1:Mt

                fprintf(['target' num2str(targeti) ': ' targetcellnames{targeti} ' ']);
                target_test0 = target_test_all(:,targeti);
                cols = colscell{targeti};
                source_test0 = source_test_all(:, cols);
                B = Bcell{targeti};
                gm = gmcell{targeti};

                %%%  preparation for conditional GMM  %%%%

                mu_ks = gm.mu;
                sigma_ks = gm.Sigma;
                pi_ks = gm.ComponentProportion;
                kGMMexe = size(mu_ks,1);
                K = size(mu_ks,2)-1;

                mu_ks_x = [];
                mu_ks_y = [];
                sigma_ks_yy = [];
                sigma_ks_yx = [];
                sigma_ks_xy = [];
                sigma_ks_xx = [];
                lambda_ks_xx = [];

                for k = 1:kGMMexe  % determine conditional distribution of each Gaussian
                    mu_k_x = mu_ks(k,1:end-1);
                    mu_k_y = mu_ks(k,end);
                    sigma_k_yy = sigma_ks(end,end,k);
                    sigma_k_yx = sigma_ks(end,1:end-1,k);
                    sigma_k_xy = sigma_ks(1:end-1,end,k);
                    sigma_k_xx = sigma_ks(1:end-1,1:end-1,k);
                    lambda_k_xx = inv(sigma_k_xx);   %%%%%%%%%%%%%%%%%%%%
                    mu_ks_x = [mu_ks_x, {mu_k_x}];
                    mu_ks_y = [mu_ks_y, {mu_k_y}];
                    sigma_ks_yy = [sigma_ks_yy, {sigma_k_yy}];
                    sigma_ks_yx = [sigma_ks_yx, {sigma_k_yx}];
                    sigma_ks_xy = [sigma_ks_xy, {sigma_k_xy}];
                    sigma_ks_xx = [sigma_ks_xx, {sigma_k_xx}];
                    lambda_ks_xx = [lambda_ks_xx, {lambda_k_xx}];
                end

                %%%  unpermuted %%%

                L0 = calculate_likelihood(source_test0*B, target_test0, kGMMexe, pi_ks, mu_ks_x, mu_ks_y, sigma_ks_xx, sigma_ks_xy, sigma_ks_yx, sigma_ks_yy, lambda_ks_xx);
                sumlogL0 = mean(log(L0));
                sumlogL0s(targeti) = sumlogL0;

                %%%%%  permute all pres   %%%%%

                source_test = source_test0;
                target_test = target_test0;
                sumlogLs = NaN(1,npermutes);
                for repeati = 1:npermutes
                    % random permutation
                    perm = randperm(nc);
                    %target_test = target_test(perm);   % permute both target and source self
                    %source_test(:,1:embed_width) = source_test(perm,1:embed_width);

                    if permute_salt
                        premute_start = 1;
                    else
                        % omit salt
                        seli = selicell{targeti};
                        premute_start = 1 + any(seli==0);
                    end
                    source_test(:,embed_width*premute_start+1:end) = source_test(perm,embed_width*premute_start+1:end);
                    L = calculate_likelihood(source_test*B, target_test, kGMMexe, pi_ks, mu_ks_x, mu_ks_y, sigma_ks_xx, sigma_ks_xy, sigma_ks_yx, sigma_ks_yy, lambda_ks_xx);
                    sumlogL = mean(log(L+realmin));
                    sumlogLs(repeati) = sumlogL;
                end  % end repeati
                sumlogL_array(targeti,training_partition,test_partition,offseti,:) = sumlogLs;

                musumlogL = mean(sumlogLs);
                sigmasumlogL = std(sumlogLs);

                p = normcdf(sumlogL0, musumlogL, sigmasumlogL, 'upper'); % how real data is eccentric
                disp(['p = ', num2str(p)]);

                sample_ps(targeti) = p;

            end % end for targeti

            p_array(:,training_partition,test_partition,offseti) = sample_ps;
            sumlogL0_array(:,training_partition,test_partition,offseti) = sumlogL0s;
            %save([evaluateL_result_file_header '.mat'], 'sample_ps','targetcellnames','sumlogL0s','permute_salt')

        end % test_partition
    end % training_partition
    %end % offseti
    save(fullfile(evaluateL_result_subfolder, ['sample' num2str(sampleID) '_offset' num2str(offset) '.mat']), 'p_array','targetcellnames','sumlogL0_array','permute_salt')


    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%   draw histogram  %%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % this is not yet updated and does not work
    if draw_histogram

        p_array_n = p_array;
        for i = 1:partition_number
            p_array_n(:,i,i) = NaN;
        end
        meanp = nanmean(p_array_n, [2,3]);
        [so,or] = sort(meanp);


        fig = figure;
        fig.PaperType       = 'a4';
        fig.PaperOrientation = 'landscape';
        fig.PaperUnits      = 'centimeters';
        fig.PaperPosition   = [0,0,29.7,21];
        fig.Units           = 'centimeters';
        fig.Position        = [0,0,29.7,21];
        fig.Color           = 'w';
        fig.InvertHardcopy  = 'off';

        wstart1 = 0.15;   % For position of plot box. In cm from left. A4 size is 21cm.
        wspace1 = 0.3;
        hstart1 = 0.67;   % In cm from bottom. Paper size is 29cm.
        hspace1 = 0.3;
        wsize1 = 0.24;
        hsize1 = 0.21;
        top_wstart = 0.19;
        top_wspace = 0.3;
        top_wsize = 0.21;
        top_hstart = 0.84; %0.86; % 0.8
        top_hsize = 0.1;
        left_wstart = 0.01; %0.1;
        left_wsize = 0.2;
        left_hstart = 0.7; %0.68; % 0.8;
        left_hspace = 0.3;
        left_hsize = 0.1;
        title_wstart = 0.43; %0.4;
        title_wsize = 0.3;
        title_hstart = 0.9;
        title_hsize = 0.1;

        ax1 = gobjects(3,3);
        hst = gobjects(3,3);
        for targeti = 1:Mt
            for col = 1:partition_number
                for row = 1:partition_number
                    %disp(['<< col ' num2str(col)  ' ; test ' num2str(row) ' >>'])
                    % self, cross1, cross2
                    model_part = col;
                    test_part = mod(col+row-2, partition_number)+1;
                    sumlogL0 = sumlogL0_array(or(targeti),model_part,test_part);
                    sumlogLs = sumlogL_array(or(targeti),model_part,test_part,:);

                    %i = mod((targeti-1),12)+1;
                    %i = (col-1)*3+row;

                    ax = subplot('Position',[wstart1+(col-1)*wspace1, hstart1-(row-1)*hspace1, wsize1, hsize1]);
                    histogram(ax, sumlogLs,10);
                    ax.FontSize = 12;
                    ax.XLabel.String = 'meanlogL';
                    ax.YLabel.String = 'count';
                    %title([targetcellnames{or(targeti)} ' model' num2str(col) ' test' num2str(row)])
                    hold on
                    yl = ylim;
                    plot(ax, sumlogL0,yl(2)/10, 'v', 'MarkerEdgeColor', 'red','MarkerFaceColor', 'red', 'Markersize',10)
                    hold off
                    %plot([sumlogL0,sumlogL0], [0,5], 'r-', 'LineWidth',5)
                    %saveas(gcf, ['histogram_' num2str(targeti) '_' targetcellnames{targeti}  '.fig'])
                end
            end
            ax_title = annotation('textbox','String',['Sample' num2str(sampleID) ' ' targetcellnames{or(targeti)}],'FitBoxToText','on','LineStyle','none','FontSize',26); % ,'Units','centimeters'
            %ax6.Units = 'centimeters';
            ax_title.Position = [title_wstart, title_hstart, title_wsize, title_hsize]; % [x_begin y_begin length height]
            ax_top = gobjects(1,3);
            for col = 1:partition_number
                ax_top(col) = annotation('textbox','String',['Part' num2str(col) ' model'],'FitBoxToText','on','LineStyle','none','FontSize',20); %,'Units','centimeters'
                ax_top(col).Position = [top_wstart+top_wspace*(col-1), top_hstart, top_wsize, top_hsize];
            end
            ax_left = gobjects(3,1);
            for row = 1:partition_number
                if row == 1
                    left_text = 'Self';
                else
                    left_text = ['Cross' num2str(row-1)];
                end
                ax_left(row) = annotation('textbox','String',left_text,'FitBoxToText','on','LineStyle','none','FontSize',20); %,'Units','centimeters'
                ax_left(row).Position = [left_wstart, left_hstart-left_hspace*(row-1), left_wsize, left_hsize];
            end
            %if row==3 && col==3 %|| targeti==Mt
            page = page + 1;
            orient(fig,'landscape')
            print(fig, evaluate_histogram_file,'-dpsc','-painters','-append'); % '-opengl'  ,'-painters'
            disp(['page ' num2str(page)])
            clf(fig)
            %end
        end

        %
        %


    end % end if draw_histogram
    %{
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%   draw ps  %%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        page = 0;
        if draw_ps
            fig = figure;
            fig.PaperType       = 'a4';
            fig.PaperOrientation = 'landscape';
            fig.PaperUnits      = 'centimeters';
            fig.PaperPosition   = [0,0,29.7,21];
            fig.Units           = 'centimeters';
            fig.Position        = [0,0,29.7,21];
            fig.Color           = 'w';
            fig.InvertHardcopy  = 'off';

            for j = 1:Mt
                i = mod((j-1),12)+1;
                %subplot(4,3,i)
                ax = heatmap(1:partition_number, 1:partition_number, squeeze(p_array(or(j),:,:))); %samples, Ks
                ax.XLabel = 'test';
                ax.YLabel = 'model';
                ax.XDisplayData = 1:partition_number;
                ax.YDisplayData = 1:partition_number;
                ax.Title = ['sample' num2str(sampleID) ', ' targetcellnames{or(j)} ];
                if i==12 || j==Mt
                    page = page + 1;
                    orient(fig,'landscape')
                    print(fig, evaluateL_permtest_file,'-dpsc','-painters','-append'); % '-opengl'  ,'-painters'
                    disp(['page ' num2str(page)])
                    clf(fig)
                end
            end
        end

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%   draw sumlogL  %%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        if draw_sumlogL
            fig2 = figure;
            fig2.PaperType       = 'a4';
            fig2.PaperOrientation = 'landscape';
            fig2.PaperUnits      = 'centimeters';
            fig2.PaperPosition   = [0,0,29.7,21];
            fig2.Units           = 'centimeters';
            fig2.Position        = [0,0,29.7,21];
            fig2.Color           = 'w';
            fig2.InvertHardcopy  = 'off';

            for j = 1:Mt
                i = mod((j-1),12)+1;
                subplot(4,3,i)
                ax = heatmap(1:partition_number, 1:partition_number, squeeze(sumlogL0_array(or(j),:,:))); %samples, Ks
                ax.XLabel = 'test';
                ax.YLabel = 'model';
                ax.XDisplayData = 1:partition_number;
                ax.YDisplayData = 1:partition_number;
                ax.Title = ['sample' num2str(sampleID) ', ' targetcellnames{or(j)} ];
                if i==12 || j==Mt
                    orient(fig2,'landscape')
                    print(fig2, evaluateL_sumlogL_file,'-dpsc','-painters','-append');
                    clf(fig2)
                end
            end
        end % if draw_sumlogL
    %}
end
%end
end


function L = calculate_likelihood(x_test, target_test, kGMM, pi_ks, mu_ks_x, mu_ks_y, sigma_ks_xx, sigma_ks_xy, sigma_ks_yx, sigma_ks_yy, lambda_ks_xx)

%%% likelihood in conditional distribution  %%%%

L = zeros(size(x_test,1),1);

for i = 1:size(x_test,1) % for each data point
    xi = x_test(i,:);

    mu_ks_xi = []; % mu, sigma, pi of each Gaussian conditional on x=xi
    sigma_ks_xi = [];
    pi_ks_xi = [];
    for k = 1:kGMM
        mu_k_x = mu_ks_x{k};
        mu_k_y = mu_ks_y{k};
        sigma_k_yy = sigma_ks_yy{k};
        sigma_k_yx = sigma_ks_yx{k};
        sigma_k_xy = sigma_ks_xy{k};
        sigma_k_xx = sigma_ks_xx{k};
        lambda_k_xx = lambda_ks_xx{k};

        mu_k_xi = mu_k_y + sigma_k_yx * lambda_k_xx * (xi - mu_k_x)';
        sigma_k_xi = sigma_k_yy - sigma_k_yx * lambda_k_xx * sigma_k_xy;
        pi_k_xi = pi_ks(k) * mvnpdf(xi, mu_k_x, sigma_k_xx);

        mu_ks_xi = cat(1, mu_ks_xi, mu_k_xi);
        sigma_ks_xi = cat(3, sigma_ks_xi, sigma_k_xi);
        pi_ks_xi = cat(1, pi_ks_xi, pi_k_xi);
    end

    pi_ks_xi = pi_ks_xi./sum(pi_ks_xi); % Sum(P(y|xi))=1

    validpeaks = pi_ks_xi>0;  % sometimes pi=0, which causes an error.
    if ~any(validpeaks)
        %disp('Error: all pis are zero')
        gm_xi = gmdistribution(zeros(1,1),zeros(1,1,1),ones(1,1)); % force reset to near zero
    else
        gm_xi = gmdistribution(mu_ks_xi(validpeaks,:),sigma_ks_xi(:,:,validpeaks),pi_ks_xi(validpeaks));
    end

    L(i) = pdf(gm_xi, target_test(i));
end

end


